{"name":"python","slug":"python","count":3,"postlist":[{"title":"python之beautifulSoup函数","slug":"python之beautifulSoup函数","date":"2020-01-30T09:43:33.000Z","updated":"2020-01-30T09:59:10.510Z","comments":true,"path":"api/articles/python之beautifulSoup函数.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"BeautifulSoup库\"><a href=\"#BeautifulSoup库\" class=\"headerlink\" title=\"BeautifulSoup库\"></a>BeautifulSoup库</h2><h6 id=\"1-处理数据分为两步：解析数据-和-提取数据，解析数据指将网页源代码解析成-Python-能“读懂”的格式，而提取数据则是指将网页源代码中无关数据过滤掉，只提取出我们所需要的数据。\"><a href=\"#1-处理数据分为两步：解析数据-和-提取数据，解析数据指将网页源代码解析成-Python-能“读懂”的格式，而提取数据则是指将网页源代码中无关数据过滤掉，只提取出我们所需要的数据。\" class=\"headerlink\" title=\"1 处理数据分为两步：解析数据 和 提取数据，解析数据指将网页源代码解析成 Python 能“读懂”的格式，而提取数据则是指将网页源代码中无关数据过滤掉，只提取出我们所需要的数据。\"></a>1 处理数据分为两步：解析数据 和 提取数据，解析数据指将网页源代码解析成 Python 能“读懂”的格式，而提取数据则是指将网页源代码中无关数据过滤掉，只提取出我们所需要的数据。</h6><p>安装步骤：<br>    cd切换到 python 安装目录 Scripts<br> 输入：pip install beautifulsoup4</p>\n<h5 id=\"2-BeautifulSoup-格式-BeautifulSoup-HTML-文本，解析器\"><a href=\"#2-BeautifulSoup-格式-BeautifulSoup-HTML-文本，解析器\" class=\"headerlink\" title=\"2.BeautifulSoup 格式 : BeautifulSoup(HTML 文本，解析器)\"></a>2.BeautifulSoup 格式 : BeautifulSoup(HTML 文本，解析器)</h5><h5 id=\"3-返回类型：type-soup-值-返回-BeautifulSoup-对象\"><a href=\"#3-返回类型：type-soup-值-返回-BeautifulSoup-对象\" class=\"headerlink\" title=\"3.返回类型：type(soup)  值  返回 .BeautifulSoup 对象\"></a>3.返回类型：type(soup)  值  返回 .BeautifulSoup 对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(res.text,&apos;html.parser&apos;)</span><br><span class=\"line\">print(type(soup))</span><br><span class=\"line\">输出  &lt;class &apos;bs4.BeautifulSoup&apos;&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-提供方法：\"><a href=\"#4-提供方法：\" class=\"headerlink\" title=\"4.提供方法：\"></a>4.提供方法：</h5><ul>\n<li>find()    返回符合条件的 <strong>首个</strong> 元素</li>\n<li><p>find_all()   返回符合条件的 <strong>所有</strong> 元素</p>\n<p> 注意：这两个方法都支持传入html标签、html属性. 多个 HTML 属性进行刷选。<br> class 是 Python 中定义类的关键字   ,  class_ 表示 HTML 中的 class ,  id  表示 HTML 中的 id</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">&apos;user-agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.get(&apos;https://book.douban.com/top250&apos;, headers=headers)</span><br><span class=\"line\">soup = BeautifulSoup(res.text,&apos;html.parser&apos;)</span><br><span class=\"line\">print(soup.find(&apos;span&apos;,class_=&apos;inq&apos;))</span><br><span class=\"line\"></span><br><span class=\"line\">输出&lt;span class=&quot;inq&quot;&gt;为你，千千万万遍&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-Tag对象-find-和-find-all-返回值\"><a href=\"#5-Tag对象-find-和-find-all-返回值\" class=\"headerlink\" title=\"5. Tag对象    find()  和 find_all() 返回值\"></a>5. Tag对象    find()  和 find_all() 返回值</h5><ul>\n<li>tag.text   获取标签的文本内容</li>\n<li>tag[‘ 属性值 ‘] 获取标签属性值</li>\n</ul>\n<h5 id=\"6-CSS选择器\"><a href=\"#6-CSS选择器\" class=\"headerlink\" title=\"6.CSS选择器\"></a>6.CSS选择器</h5><p>  在 CSS 选择器中，# 代表 id，. 代表 class。BeautifulSoup 对象 有一个 select() 方法，我们将 CSS 选择器 传进去即可直接找到我们需要的元素。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">&apos;user-agent&apos;: &apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">res = requests.get(&apos;https://book.douban.com/top250&apos;, headers=headers)</span><br><span class=\"line\">soup = BeautifulSoup(res.text,&apos;html.parser&apos;)</span><br><span class=\"line\">tag =soup.select(&apos;.pl2 a&apos;)</span><br><span class=\"line\">for i in tag:</span><br><span class=\"line\">name =&apos;&apos;.join(i.text.split())</span><br><span class=\"line\">link = i[&apos;href&apos;]</span><br><span class=\"line\">print(name,link)</span><br><span class=\"line\"></span><br><span class=\"line\">输出： 追风筝的人   https://book.douban.com/subject/1770782/</span><br><span class=\"line\">解忧杂货店 https://book.douban.com/subject/25862578/</span><br><span class=\"line\">小王子 https://book.douban.com/subject/1084336/</span><br><span class=\"line\">省略。。。。。</span><br></pre></td></tr></table></figure>","text":"BeautifulSoup库1 处理数据分为两步：解析数据 和 提取数据，解析数据指将网页源代码解析成 Python 能“读懂”的格式，而提取数据则是指将网页源代码中无关数据过滤掉，只提取出我们所需要的数据。安装步骤：<br>    cd切换到 python 安装目录 Scrip","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]},{"title":"'python之openpyxl函数'","slug":"python之openpyxl函数","date":"2020-02-07T09:12:41.000Z","updated":"2020-02-07T09:20:20.125Z","comments":true,"path":"api/articles/python之openpyxl函数.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"openpyxl\"><a href=\"#openpyxl\" class=\"headerlink\" title=\"openpyxl\"></a>openpyxl</h3><h3 id=\"1-Excel-文件也被称为-工作簿（workbook），每个工作簿中可以新建多个-工作表（worksheet）。而每个工作表中又有很多个-单元格-组成，每个单元格通过列和行来定位，比如第一个单元格被称为-A1-单元格。\"><a href=\"#1-Excel-文件也被称为-工作簿（workbook），每个工作簿中可以新建多个-工作表（worksheet）。而每个工作表中又有很多个-单元格-组成，每个单元格通过列和行来定位，比如第一个单元格被称为-A1-单元格。\" class=\"headerlink\" title=\"1.Excel 文件也被称为 工作簿（workbook），每个工作簿中可以新建多个 工作表（worksheet）。而每个工作表中又有很多个 单元格 组成，每个单元格通过列和行来定位，比如第一个单元格被称为 A1 单元格。\"></a>1.Excel 文件也被称为 工作簿（workbook），每个工作簿中可以新建多个 工作表（worksheet）。而每个工作表中又有很多个 单元格 组成，每个单元格通过列和行来定位，比如第一个单元格被称为 A1 单元格。</h3><h3 id=\"openpyxl-写文件\"><a href=\"#openpyxl-写文件\" class=\"headerlink\" title=\"openpyxl 写文件\"></a>openpyxl 写文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from openpyxl import Workbook # 从 openpyxl 引入 Workbook（工作簿）类</span><br><span class=\"line\">wb = Workbook() # 实列化工作簿</span><br><span class=\"line\">sheet = wb.active # 选择默认工作表</span><br><span class=\"line\">sheet.title = &apos;小周日报&apos; # 给工作表重命名</span><br><span class=\"line\"></span><br><span class=\"line\">data = [</span><br><span class=\"line\">[&apos;课程&apos;, &apos;天数&apos;],</span><br><span class=\"line\">[&apos;python&apos;, &apos;12&apos;],</span><br><span class=\"line\">[&apos;javascript&apos;, &apos;15&apos;]</span><br><span class=\"line\">]</span><br><span class=\"line\"># 写入多行数据</span><br><span class=\"line\">for row in data:</span><br><span class=\"line\">sheet.append(row)</span><br><span class=\"line\"># 保存excel 文件</span><br><span class=\"line\">wb.save(&apos;小周的编程计划.xls&apos;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"openpyxl-读文件\"><a href=\"#openpyxl-读文件\" class=\"headerlink\" title=\"openpyxl 读文件\"></a>openpyxl 读文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from openpyxl import load_workbook</span><br><span class=\"line\"># 打开 Excel 文件</span><br><span class=\"line\">wb = load_workbook(&apos;考勤统计.xlsx&apos;)</span><br><span class=\"line\"># 选择考勤统计表这张工作表</span><br><span class=\"line\">sheet = wb[&apos;考勤统计表&apos;]</span><br><span class=\"line\"># 打印出所有工作表名称</span><br><span class=\"line\">print(wb.sheetnames)</span><br><span class=\"line\"># 输出：[&apos;考勤统计表&apos;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"Excel-文件写入步骤\"><a href=\"#Excel-文件写入步骤\" class=\"headerlink\" title=\"Excel 文件写入步骤\"></a>Excel 文件写入步骤</h4><ol>\n<li>创建工作簿  wb = openpyxl.Workbook()</li>\n<li>选择工作表  sheet = wb.active 或 wb[‘工作表’]</li>\n<li>操作单元格 sheet[‘A1’] =1 或sheet.append[1,2,3]</li>\n<li><p>保存工作簿 wb.save(‘文件名.xlsx’)</p>\n<h3 id=\"2-csv\"><a href=\"#2-csv\" class=\"headerlink\" title=\"2.csv\"></a>2.csv</h3><p>CSV 全称 Comma-Separated Values（逗号分隔值），它是一种通用的、相对简单的文件格式，被用户、商业和科学广泛应用。</p>\n</li>\n</ol>\n<p>和 JSON 一样，CSV 也是按照一定规范书写的文本。xlsx 格式的文件是二进制的，只能被 Excel 打开。而 csv 格式的文件是纯文本，你甚至可以用记事本打开它。当用 Excel 打开 csv 文件时，会将其解析成表格形式展示。</p>\n<p>和 xlsx 文件相比，csv 文件占用空间和内容小，打开的速度也更快。但 csv 文件功能受限，不能存储图表、公式、图片等。</p>\n<h3 id=\"2-1-csv-读文件\"><a href=\"#2-1-csv-读文件\" class=\"headerlink\" title=\"2.1 csv 读文件\"></a>2.1 csv 读文件</h3><p>首先通过 import csv 导入 csv 库，然后用 open() 函数打开 csv 文件，将得到的 file 对象传入 csv.reader() 方法进行处理，最终得到一个可读取对象。我们可以用 for 循环遍历得到的可读取对象 csv_reader 获取 csv 文件中的每一行数据。<br>注意：open() 函数中的第二个参数 newline=’’ 是为了让文件内容中的换行符能被正确解析，建议在用 csv 处理文件时都加上这个参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\">with open(&apos;考勤统计表.csv&apos;, newline=&apos;&apos;) as file:</span><br><span class=\"line\">csv_reader = csv.reader(file)</span><br><span class=\"line\">for row in csv_reader:</span><br><span class=\"line\">print(row)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-csv写文件\"><a href=\"#2-2-csv写文件\" class=\"headerlink\" title=\"2.2 csv写文件\"></a>2.2 csv写文件</h3><p>csv 还提供了一个更加快捷的写入多行内容的方法——writerows()，通过该方法不再需要使用 for 循环，直接将多行数据的二维列表传进去即可.<br>后面两句  等同于   csv_writer.writerows(data)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import csv</span><br><span class=\"line\"></span><br><span class=\"line\">with open(&apos;测试.csv&apos;, &apos;w&apos;, &apos;newline&apos;) as file:</span><br><span class=\"line\">csv_writer = csv.writer(file)</span><br><span class=\"line\">data = [</span><br><span class=\"line\">[&apos;测试&apos;, &apos;天数&apos;],</span><br><span class=\"line\">[&apos;python&apos;, 12],</span><br><span class=\"line\">[&apos;测试&apos;, &apos;天数&apos;]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">for row in data:</span><br><span class=\"line\">csv_writer.writerow(row)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"猜猜这是什么呢-哈哈哈哈哈。。\"><a href=\"#猜猜这是什么呢-哈哈哈哈哈。。\" class=\"headerlink\" title=\"猜猜这是什么呢  哈哈哈哈哈。。\"></a>猜猜这是什么呢  哈哈哈哈哈。。</h4><pre><code>import requests\nfrom openpyxl import Workbook\nfrom datetime import datetime\nimport time\n\nheaders = {\n&apos;user-agent&apos;:&apos;Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1&apos;\n}\n\nwb = Workbook()\nsheet = wb.active\nsheet.title = &apos;等你下课.xls&apos;\nheader = [&apos;评论人昵称&apos;,&apos;评论时间&apos;,&apos;评论内容&apos;]\nsheet.append(header)\n\nfor pagenum in range(5):\n lasthotcommentid=&apos;&apos;\n params = {\n &apos;g_tk&apos;: &apos;5381&apos;,\n &apos;loginUin&apos;: &apos;0&apos;,\n &apos;hostUin&apos;: &apos;0&apos;,\n &apos;format&apos;: &apos;json&apos;,\n &apos;inCharset&apos;: &apos;utf8&apos;,\n &apos;outCharset&apos;: &apos;GB2312&apos;,\n &apos;notice&apos;: &apos;0&apos;,\n &apos;platform&apos;: &apos;yqq.json&apos;,\n &apos;needNewCode&apos;: &apos;0&apos;,\n &apos;cid&apos;: &apos;205360772&apos;,\n &apos;reqtype&apos;: &apos;2&apos;,\n &apos;biztype&apos;: &apos;1&apos;,\n topid&apos;: &apos;212877900&apos;,\n &apos;cmd&apos;: &apos;8&apos;,\n &apos;needmusiccrit&apos;: &apos;0&apos;,\n &apos;pagenum&apos;: pagenum,\n &apos;pagesize&apos;: &apos;25&apos;,\n &apos;lasthotcommentid&apos;: lasthotcommentid,\n &apos;domain&apos;: &apos;qq.com&apos;,\n &apos;ct&apos;: &apos;24&apos;,\n &apos;cv&apos;: &apos;10101010&apos;\n}\nres = requests.get(&apos;https://c.y.qq.com/base/fcgi-bin/fcg_global_comment_h5.fcg&apos;, headers=headers, params=params)\ndata = res.json()\nfor item in data[&apos;comment&apos;][&apos;commentlist&apos;]:\n  nick = item[&apos;nick&apos;]\n  times = datetime.fromtimestamp(item[&apos;time&apos;])\n  content=item[&apos;rootcommentcontent&apos;]\n\nrow= [nick,times,content]\nsheet.append(row)\nprint(nick,times,content)\nwb.save(&apos;等你下课.xls&apos;)\n</code></pre>","text":"openpyxl1.Excel 文件也被称为 工作簿（workbook），每个工作簿中可以新建多个 工作表（worksheet）。而每个工作表中又有很多个 单元格 组成，每个单元格通过列和行来定位，比如第一个单元格被称为 A1 单元格。openpyxl 写文件1<br>2<br>","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]},{"title":"搭建selenium 教程","slug":"搭建selenium教程","date":"2020-01-24T14:10:53.000Z","updated":"2020-01-24T17:01:13.397Z","comments":true,"path":"api/articles/搭建selenium教程.json","excerpt":"","keywords":null,"cover":"image/2bug.png","content":"<h4 id=\"1-chrome-搭建-selenium-教程\"><a href=\"#1-chrome-搭建-selenium-教程\" class=\"headerlink\" title=\"1.    chrome 搭建  selenium 教程\"></a>1.    chrome 搭建  selenium 教程</h4><p>昨天搭建selenium 一直报错：<br><img src=\"image/2bug.png\"><br>今天早上完美解决 美滋滋  就记下搭建过程：如下</p>\n<p>1.查看chrome –版本<br><img src=\"image/1.chrome.png\"></p>\n<p>2.点击选择相应浏览器版本的驱动<a href=\"https://npm.taobao.org/mirrors/chromedriver\" target=\"_blank\" rel=\"noopener\">https://npm.taobao.org/mirrors/chromedriver</a><br><img src=\"image/3.png\"></p>\n<p>3.Python是已经安装好的环境下，跟安装目录下放置：浏览器驱动<br><img src=\"image/4.png\"></p>\n<p>4.chrome浏览器安装目录下放置：浏览器驱动<br><img src=\"image/6.png\"></p>\n<p>5.chrome 浏览器的安装目录配置电脑  环境变量—Path 路径<br><img src=\"image/7.png\"></p>\n<p>6.pthyon 安装目录下—》Scripts===》配置：放置浏览器驱动<br><img src=\"image/8.png\"></p>\n<p>7.选择工具进行安装<a href=\"https://www.jetbrains.com/pycharm/download/#section=windows\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/pycharm/download/#section=windows</a> 选择社区版本  安装下载。<br><img src=\"image/9.png\"></p>\n<p>8.pycharm 工具安装完成后设置目录指向settings  pthyon 解释目录<br><img src=\"image/11.png\"></p>\n<p>9.cd命令切换至python/script目录下，输入pip install selenium， 导入包。即可进行安装。</p>\n<p>10.最后一步了  运行   –》成功后  自动启动chrome 浏览器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from selenium import  webdriver</span><br><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">browser = webdriver.Chrome()</span><br><span class=\"line\"></span><br><span class=\"line\">browser.get(&apos;http://xxx.jsp&apos;)   //请求方式get</span><br><span class=\"line\"># 登陆名</span><br><span class=\"line\">login_u=browser.find_element_by_name(&apos;username&apos;)  //查询前端页面  用户框  name =&apos;username&apos;</span><br><span class=\"line\">login_u.send_keys(&apos;xxx&apos;) //设置登陆用户名</span><br><span class=\"line\"></span><br><span class=\"line\"># 密码</span><br><span class=\"line\">login_p=browser.find_element_by_name(&apos;password&apos;)   //查询前端页面  密码框  name =&apos;password&apos;</span><br><span class=\"line\">login_p.send_keys(&apos;###&apos;)  //设置密码</span><br><span class=\"line\"></span><br><span class=\"line\"># 点击按钮</span><br><span class=\"line\">login_btn=browser.find_element_by_tag_name(&apos;a&apos;)</span><br><span class=\"line\">login_btn.click()   //点击</span><br></pre></td></tr></table></figure></p>\n","text":"1.    chrome 搭建  selenium 教程昨天搭建selenium 一直报错：<br> [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"浏览器自动化","slug":"浏览器自动化","count":1,"path":"api/categories/浏览器自动化.json"}],"tags":[{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"}]}]}